import numpy as np 
import scipy.stats as sp
from Bio import SeqIO

def z_score(alignment_scores):
    """
    Summary:
    Computes the z-score for alignment scores generated by the alignment function in 
    the dna_identification module
    Args:
        alignment_scores (list): alignment scores of the target sequence to the database

    Returns:
        list: z-scores
    """
    mean = np.mean(alignment_scores)
    sd = np.std(alignment_scores)
    z_scores = []
    for s in alignment_scores:
        z = (s-mean)/sd
        z_scores.append(z)
    return z_scores



def p_value(z_scores, database):
    """
    Summary:
    Calculates the p-value of the given z-scores

    Args:
        z_scores (list): generated by z-score function above 

    Returns:
        list: p-values for each alignment
    """
    
    p_values = []
    for z in z_scores:
        p_value = sp.norm.sf(abs(z))
        p_values.append(p_value)
    breeds = []
    data = SeqIO.parse(database, 'fasta')
    for record in data:
            description = record.description
            split = description.split(']')
            breed = split[6]
            breed = breed[8:]
            breeds.append(breed)
    p_dict = {}
    for b,p in zip(breeds, p_values):
        p_dict[b] = p
            
    return p_dict
